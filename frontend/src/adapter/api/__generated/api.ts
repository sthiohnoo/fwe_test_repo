/* tslint:disable */
/* eslint-disable */
/**
 * openAPI_fwe_homework
 * Delete Item from ShoppingList
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PostItemsRequestInner
 */
export interface PostItemsRequestInner {
    /**
     * 
     * @type {string}
     * @memberof PostItemsRequestInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostItemsRequestInner
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PostShoppingListsRequest
 */
export interface PostShoppingListsRequest {
    /**
     * 
     * @type {string}
     * @memberof PostShoppingListsRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostShoppingListsRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<PostShoppingListsRequestItemsInner>}
     * @memberof PostShoppingListsRequest
     */
    'items'?: Array<PostShoppingListsRequestItemsInner>;
}
/**
 * 
 * @export
 * @interface PostShoppingListsRequestItemsInner
 */
export interface PostShoppingListsRequestItemsInner {
    /**
     * 
     * @type {string}
     * @memberof PostShoppingListsRequestItemsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostShoppingListsRequestItemsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostShoppingListsRequestItemsInner
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PutItemsIdRequest
 */
export interface PutItemsIdRequest {
    /**
     * 
     * @type {string}
     * @memberof PutItemsIdRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutItemsIdRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PutShoppingListsIdRequest
 */
export interface PutShoppingListsIdRequest {
    /**
     * 
     * @type {string}
     * @memberof PutShoppingListsIdRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutShoppingListsIdRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<PutShoppingListsIdRequestItemsInner>}
     * @memberof PutShoppingListsIdRequest
     */
    'items'?: Array<PutShoppingListsIdRequestItemsInner>;
}
/**
 * 
 * @export
 * @interface PutShoppingListsIdRequestItemsInner
 */
export interface PutShoppingListsIdRequestItemsInner {
    /**
     * 
     * @type {string}
     * @memberof PutShoppingListsIdRequestItemsInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof PutShoppingListsIdRequestItemsInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PutShoppingListsIdRequestItemsInner
     */
    'isPurchased'?: boolean;
}
/**
 * 
 * @export
 * @interface PutShoppingListsShoppingListIdFavoritesRequest
 */
export interface PutShoppingListsShoppingListIdFavoritesRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PutShoppingListsShoppingListIdFavoritesRequest
     */
    'isFavorite': boolean;
}
/**
 * 
 * @export
 * @interface PutShoppingListsShoppingListIdItemsItemIdRequest
 */
export interface PutShoppingListsShoppingListIdItemsItemIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PutShoppingListsShoppingListIdItemsItemIdRequest
     */
    'quantity': number;
    /**
     * 
     * @type {boolean}
     * @memberof PutShoppingListsShoppingListIdItemsItemIdRequest
     */
    'isPurchased'?: boolean;
}
/**
 * 
 * @export
 * @interface ShoppingList
 */
export interface ShoppingList {
    /**
     * 
     * @type {string}
     * @memberof ShoppingList
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingList
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingList
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingList
     */
    'createdAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof ShoppingList
     */
    'isFavorite': boolean;
    /**
     * 
     * @type {Array<Item>}
     * @memberof ShoppingList
     */
    'items'?: Array<Item>;
}
/**
 * 
 * @export
 * @interface ShoppingListItem
 */
export interface ShoppingListItem {
    /**
     * 
     * @type {string}
     * @memberof ShoppingListItem
     */
    'listId': string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListItem
     */
    'itemId': string;
    /**
     * 
     * @type {number}
     * @memberof ShoppingListItem
     */
    'quantity': number;
    /**
     * 
     * @type {boolean}
     * @memberof ShoppingListItem
     */
    'isPurchased': boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Your DELETE endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemsId: async (id: string, id2: string, id3: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemsId', 'id', id)
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('deleteItemsId', 'id2', id2)
            // verify required parameter 'id3' is not null or undefined
            assertParamExists('deleteItemsId', 'id3', id3)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id2)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id3)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your DELETE endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingListsId: async (id: string, id2: string, id3: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteShoppingListsId', 'id', id)
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('deleteShoppingListsId', 'id2', id2)
            // verify required parameter 'id3' is not null or undefined
            assertParamExists('deleteShoppingListsId', 'id3', id3)
            const localVarPath = `/shoppingLists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id2)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id3)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your DELETE endpoint
         * @param {string} shoppingListId 
         * @param {string} itemId 
         * @param {string} shoppingListId2 
         * @param {string} itemId2 
         * @param {string} shoppingListId3 
         * @param {string} itemId3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingListsShoppingListIdItemsItemId: async (shoppingListId: string, itemId: string, shoppingListId2: string, itemId2: string, shoppingListId3: string, itemId3: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shoppingListId' is not null or undefined
            assertParamExists('deleteShoppingListsShoppingListIdItemsItemId', 'shoppingListId', shoppingListId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteShoppingListsShoppingListIdItemsItemId', 'itemId', itemId)
            // verify required parameter 'shoppingListId2' is not null or undefined
            assertParamExists('deleteShoppingListsShoppingListIdItemsItemId', 'shoppingListId2', shoppingListId2)
            // verify required parameter 'itemId2' is not null or undefined
            assertParamExists('deleteShoppingListsShoppingListIdItemsItemId', 'itemId2', itemId2)
            // verify required parameter 'shoppingListId3' is not null or undefined
            assertParamExists('deleteShoppingListsShoppingListIdItemsItemId', 'shoppingListId3', shoppingListId3)
            // verify required parameter 'itemId3' is not null or undefined
            assertParamExists('deleteShoppingListsShoppingListIdItemsItemId', 'itemId3', itemId3)
            const localVarPath = `/shoppingLists/{shoppingListId}/items/{itemId}`
                .replace(`{${"shoppingListId"}}`, encodeURIComponent(String(shoppingListId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"shoppingListId"}}`, encodeURIComponent(String(shoppingListId2)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId2)))
                .replace(`{${"shoppingListId"}}`, encodeURIComponent(String(shoppingListId3)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId3)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsId: async (id: string, id2: string, id3: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemsId', 'id', id)
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('getItemsId', 'id2', id2)
            // verify required parameter 'id3' is not null or undefined
            assertParamExists('getItemsId', 'id3', id3)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id2)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id3)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} itemName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsNameItemName: async (itemName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemName' is not null or undefined
            assertParamExists('getItemsNameItemName', 'itemName', itemName)
            const localVarPath = `/items/name/{itemName}`
                .replace(`{${"itemName"}}`, encodeURIComponent(String(itemName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingLists: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shoppingLists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListsId: async (id: string, id2: string, id3: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getShoppingListsId', 'id', id)
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('getShoppingListsId', 'id2', id2)
            // verify required parameter 'id3' is not null or undefined
            assertParamExists('getShoppingListsId', 'id3', id3)
            const localVarPath = `/shoppingLists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id2)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id3)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} itemId 
         * @param {string} itemId2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListsItemsItemId: async (itemId: string, itemId2: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getShoppingListsItemsItemId', 'itemId', itemId)
            // verify required parameter 'itemId2' is not null or undefined
            assertParamExists('getShoppingListsItemsItemId', 'itemId2', itemId2)
            const localVarPath = `/shoppingLists/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListsSearch: async (name?: string, description?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shoppingLists/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Favorite ShoppingLists
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListsSearchFavorites: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shoppingLists/search/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your POST endpoint
         * @param {Array<PostItemsRequestInner>} [postItemsRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItems: async (postItemsRequestInner?: Array<PostItemsRequestInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postItemsRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your POST endpoint
         * @param {PostShoppingListsRequest} [postShoppingListsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShoppingLists: async (postShoppingListsRequest?: PostShoppingListsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shoppingLists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postShoppingListsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your PUT endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {PutItemsIdRequest} [putItemsIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemsId: async (id: string, id2: string, id3: string, putItemsIdRequest?: PutItemsIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemsId', 'id', id)
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('putItemsId', 'id2', id2)
            // verify required parameter 'id3' is not null or undefined
            assertParamExists('putItemsId', 'id3', id3)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id2)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id3)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putItemsIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your PUT endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {PutShoppingListsIdRequest} [putShoppingListsIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingListsId: async (id: string, id2: string, id3: string, putShoppingListsIdRequest?: PutShoppingListsIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putShoppingListsId', 'id', id)
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('putShoppingListsId', 'id2', id2)
            // verify required parameter 'id3' is not null or undefined
            assertParamExists('putShoppingListsId', 'id3', id3)
            const localVarPath = `/shoppingLists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id2)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id3)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putShoppingListsIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Favorite Status
         * @summary Your PUT endpoint
         * @param {string} shoppingListId 
         * @param {string} shoppingListId2 
         * @param {PutShoppingListsShoppingListIdFavoritesRequest} [putShoppingListsShoppingListIdFavoritesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingListsShoppingListIdFavorites: async (shoppingListId: string, shoppingListId2: string, putShoppingListsShoppingListIdFavoritesRequest?: PutShoppingListsShoppingListIdFavoritesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shoppingListId' is not null or undefined
            assertParamExists('putShoppingListsShoppingListIdFavorites', 'shoppingListId', shoppingListId)
            // verify required parameter 'shoppingListId2' is not null or undefined
            assertParamExists('putShoppingListsShoppingListIdFavorites', 'shoppingListId2', shoppingListId2)
            const localVarPath = `/shoppingLists/{shoppingListId}/favorites`
                .replace(`{${"shoppingListId"}}`, encodeURIComponent(String(shoppingListId)))
                .replace(`{${"shoppingListId"}}`, encodeURIComponent(String(shoppingListId2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putShoppingListsShoppingListIdFavoritesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Item to ShoppingList
         * @summary Your PUT endpoint
         * @param {string} shoppingListId 
         * @param {string} itemId 
         * @param {string} shoppingListId2 
         * @param {string} itemId2 
         * @param {string} shoppingListId3 
         * @param {string} itemId3 
         * @param {PutShoppingListsShoppingListIdItemsItemIdRequest} [putShoppingListsShoppingListIdItemsItemIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingListsShoppingListIdItemsItemId: async (shoppingListId: string, itemId: string, shoppingListId2: string, itemId2: string, shoppingListId3: string, itemId3: string, putShoppingListsShoppingListIdItemsItemIdRequest?: PutShoppingListsShoppingListIdItemsItemIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shoppingListId' is not null or undefined
            assertParamExists('putShoppingListsShoppingListIdItemsItemId', 'shoppingListId', shoppingListId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('putShoppingListsShoppingListIdItemsItemId', 'itemId', itemId)
            // verify required parameter 'shoppingListId2' is not null or undefined
            assertParamExists('putShoppingListsShoppingListIdItemsItemId', 'shoppingListId2', shoppingListId2)
            // verify required parameter 'itemId2' is not null or undefined
            assertParamExists('putShoppingListsShoppingListIdItemsItemId', 'itemId2', itemId2)
            // verify required parameter 'shoppingListId3' is not null or undefined
            assertParamExists('putShoppingListsShoppingListIdItemsItemId', 'shoppingListId3', shoppingListId3)
            // verify required parameter 'itemId3' is not null or undefined
            assertParamExists('putShoppingListsShoppingListIdItemsItemId', 'itemId3', itemId3)
            const localVarPath = `/shoppingLists/{shoppingListId}/items/{itemId}`
                .replace(`{${"shoppingListId"}}`, encodeURIComponent(String(shoppingListId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"shoppingListId"}}`, encodeURIComponent(String(shoppingListId2)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId2)))
                .replace(`{${"shoppingListId"}}`, encodeURIComponent(String(shoppingListId3)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId3)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putShoppingListsShoppingListIdItemsItemIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Your DELETE endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemsId(id, id2, id3, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteItemsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your DELETE endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShoppingListsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingListsId(id, id2, id3, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteShoppingListsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your DELETE endpoint
         * @param {string} shoppingListId 
         * @param {string} itemId 
         * @param {string} shoppingListId2 
         * @param {string} itemId2 
         * @param {string} shoppingListId3 
         * @param {string} itemId3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShoppingListsShoppingListIdItemsItemId(shoppingListId: string, itemId: string, shoppingListId2: string, itemId2: string, shoppingListId3: string, itemId3: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingListsShoppingListIdItemsItemId(shoppingListId, itemId, shoppingListId2, itemId2, shoppingListId3, itemId3, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteShoppingListsShoppingListIdItemsItemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItems(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemsId(id, id2, id3, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getItemsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} itemName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsNameItemName(itemName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemsNameItemName(itemName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getItemsNameItemName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingLists(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShoppingList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingLists(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getShoppingLists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingListsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingListsId(id, id2, id3, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getShoppingListsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} itemId 
         * @param {string} itemId2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingListsItemsItemId(itemId: string, itemId2: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShoppingListItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingListsItemsItemId(itemId, itemId2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getShoppingListsItemsItemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingListsSearch(name?: string, description?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShoppingList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingListsSearch(name, description, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getShoppingListsSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Favorite ShoppingLists
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingListsSearchFavorites(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShoppingList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingListsSearchFavorites(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getShoppingListsSearchFavorites']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your POST endpoint
         * @param {Array<PostItemsRequestInner>} [postItemsRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItems(postItemsRequestInner?: Array<PostItemsRequestInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postItems(postItemsRequestInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your POST endpoint
         * @param {PostShoppingListsRequest} [postShoppingListsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postShoppingLists(postShoppingListsRequest?: PostShoppingListsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postShoppingLists(postShoppingListsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postShoppingLists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your PUT endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {PutItemsIdRequest} [putItemsIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemsId(id: string, id2: string, id3: string, putItemsIdRequest?: PutItemsIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemsId(id, id2, id3, putItemsIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putItemsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your PUT endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {PutShoppingListsIdRequest} [putShoppingListsIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShoppingListsId(id: string, id2: string, id3: string, putShoppingListsIdRequest?: PutShoppingListsIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putShoppingListsId(id, id2, id3, putShoppingListsIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putShoppingListsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Favorite Status
         * @summary Your PUT endpoint
         * @param {string} shoppingListId 
         * @param {string} shoppingListId2 
         * @param {PutShoppingListsShoppingListIdFavoritesRequest} [putShoppingListsShoppingListIdFavoritesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShoppingListsShoppingListIdFavorites(shoppingListId: string, shoppingListId2: string, putShoppingListsShoppingListIdFavoritesRequest?: PutShoppingListsShoppingListIdFavoritesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putShoppingListsShoppingListIdFavorites(shoppingListId, shoppingListId2, putShoppingListsShoppingListIdFavoritesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putShoppingListsShoppingListIdFavorites']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add Item to ShoppingList
         * @summary Your PUT endpoint
         * @param {string} shoppingListId 
         * @param {string} itemId 
         * @param {string} shoppingListId2 
         * @param {string} itemId2 
         * @param {string} shoppingListId3 
         * @param {string} itemId3 
         * @param {PutShoppingListsShoppingListIdItemsItemIdRequest} [putShoppingListsShoppingListIdItemsItemIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShoppingListsShoppingListIdItemsItemId(shoppingListId: string, itemId: string, shoppingListId2: string, itemId2: string, shoppingListId3: string, itemId3: string, putShoppingListsShoppingListIdItemsItemIdRequest?: PutShoppingListsShoppingListIdItemsItemIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingListItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putShoppingListsShoppingListIdItemsItemId(shoppingListId, itemId, shoppingListId2, itemId2, shoppingListId3, itemId3, putShoppingListsShoppingListIdItemsItemIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putShoppingListsShoppingListIdItemsItemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Your DELETE endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemsId(id, id2, id3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your DELETE endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingListsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteShoppingListsId(id, id2, id3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your DELETE endpoint
         * @param {string} shoppingListId 
         * @param {string} itemId 
         * @param {string} shoppingListId2 
         * @param {string} itemId2 
         * @param {string} shoppingListId3 
         * @param {string} itemId3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingListsShoppingListIdItemsItemId(shoppingListId: string, itemId: string, shoppingListId2: string, itemId2: string, shoppingListId3: string, itemId3: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteShoppingListsShoppingListIdItemsItemId(shoppingListId, itemId, shoppingListId2, itemId2, shoppingListId3, itemId3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems(options?: RawAxiosRequestConfig): AxiosPromise<Array<Item>> {
            return localVarFp.getItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig): AxiosPromise<Item> {
            return localVarFp.getItemsId(id, id2, id3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} itemName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsNameItemName(itemName: string, options?: RawAxiosRequestConfig): AxiosPromise<Item> {
            return localVarFp.getItemsNameItemName(itemName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingLists(options?: RawAxiosRequestConfig): AxiosPromise<Array<ShoppingList>> {
            return localVarFp.getShoppingLists(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingList> {
            return localVarFp.getShoppingListsId(id, id2, id3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} itemId 
         * @param {string} itemId2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListsItemsItemId(itemId: string, itemId2: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ShoppingListItem>> {
            return localVarFp.getShoppingListsItemsItemId(itemId, itemId2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListsSearch(name?: string, description?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ShoppingList>> {
            return localVarFp.getShoppingListsSearch(name, description, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Favorite ShoppingLists
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListsSearchFavorites(options?: RawAxiosRequestConfig): AxiosPromise<Array<ShoppingList>> {
            return localVarFp.getShoppingListsSearchFavorites(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your POST endpoint
         * @param {Array<PostItemsRequestInner>} [postItemsRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItems(postItemsRequestInner?: Array<PostItemsRequestInner>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Item>> {
            return localVarFp.postItems(postItemsRequestInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your POST endpoint
         * @param {PostShoppingListsRequest} [postShoppingListsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShoppingLists(postShoppingListsRequest?: PostShoppingListsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingList> {
            return localVarFp.postShoppingLists(postShoppingListsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your PUT endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {PutItemsIdRequest} [putItemsIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemsId(id: string, id2: string, id3: string, putItemsIdRequest?: PutItemsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Item> {
            return localVarFp.putItemsId(id, id2, id3, putItemsIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your PUT endpoint
         * @param {string} id 
         * @param {string} id2 
         * @param {string} id3 
         * @param {PutShoppingListsIdRequest} [putShoppingListsIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingListsId(id: string, id2: string, id3: string, putShoppingListsIdRequest?: PutShoppingListsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingList> {
            return localVarFp.putShoppingListsId(id, id2, id3, putShoppingListsIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Favorite Status
         * @summary Your PUT endpoint
         * @param {string} shoppingListId 
         * @param {string} shoppingListId2 
         * @param {PutShoppingListsShoppingListIdFavoritesRequest} [putShoppingListsShoppingListIdFavoritesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingListsShoppingListIdFavorites(shoppingListId: string, shoppingListId2: string, putShoppingListsShoppingListIdFavoritesRequest?: PutShoppingListsShoppingListIdFavoritesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingList> {
            return localVarFp.putShoppingListsShoppingListIdFavorites(shoppingListId, shoppingListId2, putShoppingListsShoppingListIdFavoritesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Item to ShoppingList
         * @summary Your PUT endpoint
         * @param {string} shoppingListId 
         * @param {string} itemId 
         * @param {string} shoppingListId2 
         * @param {string} itemId2 
         * @param {string} shoppingListId3 
         * @param {string} itemId3 
         * @param {PutShoppingListsShoppingListIdItemsItemIdRequest} [putShoppingListsShoppingListIdItemsItemIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingListsShoppingListIdItemsItemId(shoppingListId: string, itemId: string, shoppingListId2: string, itemId2: string, shoppingListId3: string, itemId3: string, putShoppingListsShoppingListIdItemsItemIdRequest?: PutShoppingListsShoppingListIdItemsItemIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingListItem> {
            return localVarFp.putShoppingListsShoppingListIdItemsItemId(shoppingListId, itemId, shoppingListId2, itemId2, shoppingListId3, itemId3, putShoppingListsShoppingListIdItemsItemIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Your DELETE endpoint
     * @param {string} id 
     * @param {string} id2 
     * @param {string} id3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteItemsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteItemsId(id, id2, id3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your DELETE endpoint
     * @param {string} id 
     * @param {string} id2 
     * @param {string} id3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteShoppingListsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteShoppingListsId(id, id2, id3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your DELETE endpoint
     * @param {string} shoppingListId 
     * @param {string} itemId 
     * @param {string} shoppingListId2 
     * @param {string} itemId2 
     * @param {string} shoppingListId3 
     * @param {string} itemId3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteShoppingListsShoppingListIdItemsItemId(shoppingListId: string, itemId: string, shoppingListId2: string, itemId2: string, shoppingListId3: string, itemId3: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteShoppingListsShoppingListIdItemsItemId(shoppingListId, itemId, shoppingListId2, itemId2, shoppingListId3, itemId3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItems(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {string} id 
     * @param {string} id2 
     * @param {string} id3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItemsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getItemsId(id, id2, id3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {string} itemName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItemsNameItemName(itemName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getItemsNameItemName(itemName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShoppingLists(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShoppingLists(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {string} id 
     * @param {string} id2 
     * @param {string} id3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShoppingListsId(id: string, id2: string, id3: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShoppingListsId(id, id2, id3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {string} itemId 
     * @param {string} itemId2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShoppingListsItemsItemId(itemId: string, itemId2: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShoppingListsItemsItemId(itemId, itemId2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShoppingListsSearch(name?: string, description?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShoppingListsSearch(name, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Favorite ShoppingLists
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShoppingListsSearchFavorites(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShoppingListsSearchFavorites(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your POST endpoint
     * @param {Array<PostItemsRequestInner>} [postItemsRequestInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postItems(postItemsRequestInner?: Array<PostItemsRequestInner>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postItems(postItemsRequestInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your POST endpoint
     * @param {PostShoppingListsRequest} [postShoppingListsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postShoppingLists(postShoppingListsRequest?: PostShoppingListsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postShoppingLists(postShoppingListsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your PUT endpoint
     * @param {string} id 
     * @param {string} id2 
     * @param {string} id3 
     * @param {PutItemsIdRequest} [putItemsIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putItemsId(id: string, id2: string, id3: string, putItemsIdRequest?: PutItemsIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putItemsId(id, id2, id3, putItemsIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your PUT endpoint
     * @param {string} id 
     * @param {string} id2 
     * @param {string} id3 
     * @param {PutShoppingListsIdRequest} [putShoppingListsIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putShoppingListsId(id: string, id2: string, id3: string, putShoppingListsIdRequest?: PutShoppingListsIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putShoppingListsId(id, id2, id3, putShoppingListsIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Favorite Status
     * @summary Your PUT endpoint
     * @param {string} shoppingListId 
     * @param {string} shoppingListId2 
     * @param {PutShoppingListsShoppingListIdFavoritesRequest} [putShoppingListsShoppingListIdFavoritesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putShoppingListsShoppingListIdFavorites(shoppingListId: string, shoppingListId2: string, putShoppingListsShoppingListIdFavoritesRequest?: PutShoppingListsShoppingListIdFavoritesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putShoppingListsShoppingListIdFavorites(shoppingListId, shoppingListId2, putShoppingListsShoppingListIdFavoritesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Item to ShoppingList
     * @summary Your PUT endpoint
     * @param {string} shoppingListId 
     * @param {string} itemId 
     * @param {string} shoppingListId2 
     * @param {string} itemId2 
     * @param {string} shoppingListId3 
     * @param {string} itemId3 
     * @param {PutShoppingListsShoppingListIdItemsItemIdRequest} [putShoppingListsShoppingListIdItemsItemIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putShoppingListsShoppingListIdItemsItemId(shoppingListId: string, itemId: string, shoppingListId2: string, itemId2: string, shoppingListId3: string, itemId3: string, putShoppingListsShoppingListIdItemsItemIdRequest?: PutShoppingListsShoppingListIdItemsItemIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putShoppingListsShoppingListIdItemsItemId(shoppingListId, itemId, shoppingListId2, itemId2, shoppingListId3, itemId3, putShoppingListsShoppingListIdItemsItemIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



